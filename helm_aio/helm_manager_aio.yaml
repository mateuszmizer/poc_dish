tosca_definitions_version: cloudify_dsl_1_3
imports:
  - https://cloudify.co/spec/cloudify/6.2.0/types.yaml
  - plugin:cloudify-kubernetes-plugin?version= >=2.13.0
  - plugin:cloudify-helm-plugin
blueprint_labels:
  csys-obj-type:
    values:
    - environment
labels:
  csys-obj-type:
    values:
     - environment
  dell-edge:
    values:
     - dell-edge
inputs:

  k8s_deployment_id:
    type: string
    default: eks

  repo_name:
    description: >
      Name of the repo to add.
    type: string
    default: cloudify-manager-aio
  chart_name:
    description: >
      Chart package name to deploy from repo.
    default: cloudify-manager-aio
  helm_installation_source:
    description: >
      Helm download link.
    type: string
    default: 'https://get.helm.sh/helm-v3.8.0-linux-amd64.tar.gz'
  repo_url:
    description: >
      URL of the repo to add. For example:
      https://kubernetes-charts.storage.googleapis.com/
    type: string
    default: https://cloudify-cosmo.github.io/cloudify-helm
  region_name:
    type: string
    default: 'ca-central-1'
    
node_templates:
  kubernetes_deployment:
    type: cloudify.kubernetes.nodes.Master
    properties:
      configuration:
        file_content: { get_secret: { concat:[kubeconfig__, { get_input: k8s_deployment_id }] } }   

  helm_install:
    type: cloudify.nodes.helm.Binary
    properties:
      use_existing_resource: false
      installation_source: { get_input: helm_installation_source }
  repo:
    type: cloudify.nodes.helm.Repo
    properties:
      resource_config:
        name: { get_input: repo_name }
        repo_url: { get_input: repo_url }
    relationships:
      - target: helm_install
        type: cloudify.helm.relationships.run_on_host
  release:
    type: cloudify.nodes.helm.Release
    properties:
      client_config:
        configuration:
          file_content: { get_secret: { concat:[kubeconfig__, { get_input: k8s_deployment_id }] } }
        authentication:
          aws_access_key_id: { get_secret: aws_access_key_id }
          aws_secret_access_key: { get_secret: aws_secret_access_key }
          aws_default_region: { get_input: region_name }
      resource_config:
        name: "cloudify-manager-aio"
        chart: { concat: [ { get_input: repo_name },'/', { get_input: chart_name } ] }
        set_values:
         - name: image.repository
           value:  "apptshay/cloudify-manager-aio"
    relationships:
      - target: helm_install
        type: cloudify.helm.relationships.run_on_host
      - target: repo
        type: cloudify.relationships.depends_on
      - type: cloudify.relationships.kubernetes.connected_to_shared_cluster
        target: kubernetes_deployment
  k8s_service:
    type: cloudify.kubernetes.resources.Service
    properties:
      use_external_resource: true
      validate_resource_status: true
      client_config:
        configuration:
          file_content: { get_secret: { concat:[kubeconfig__, { get_input: k8s_deployment_id }] } }  
      definition:
        apiVersion: v1
        kind: Service
        metadata:
          name: { get_input: chart_name }
    relationships:
      - target: release
        type: cloudify.relationships.depends_on
  licence:
    type: cloudify.nodes.Root
    interfaces:
      cloudify.interfaces.lifecycle:
        configure:
          implementation: scripts/licence.sh
          inputs:
            process:
              env:
                IP: { get_attribute: [k8s_service, kubernetes, status, load_balancer, ingress, 0, ip] }
                ADMIN_PASSWORD: admin
                AWS_ACCESS_KEY_ID: { get_secret: aws_access_key_id }
                AWS_SECRET_ACCESS_KEY: { get_secret: aws_secret_access_key }
                KUBECONFIG: { get_secret: { concat:[kubeconfig__, { get_input: k8s_deployment_id }] } }
          executor: central_deployment_agent
    relationships:
      - target: k8s_service
        type: cloudify.relationships.depends_on

capabilities:
  cloudify_manager_endpoint:
    value: { get_attribute: [k8s_service, kubernetes, status, load_balancer, ingress, 0, ip] }
  related_kubernetes_deployment_id:
    value: { get_input: k8s_deployment_id }
  related_kubernetes_config_secret:
    value:  { concat: [ kubeconfig__, { get_input: k8s_deployment_id } ] }
