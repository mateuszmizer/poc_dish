tosca_definitions_version: cloudify_dsl_1_3

imports:
  - https://cloudify.co/spec/cloudify/6.3.0/types.yaml

inputs:

  submanager_deployment_id:
    type: string
    default: eb830ef6-a996-4b41-ac07-125996e4983b
  
  default_region_name:
    type: string
    default: 'us-west-1'

deployment_settings:
  default_schedules:
    refresh:
      workflow: execute_operation
      since: '+15min'
      recurrence: '15min'
      workflow_parameters:
        operation: cloudify.interfaces.lifecycle.start
        node_ids: [policy_matcher, labeler]

node_templates:

  submanager:
    type: cloudify.nodes.SharedResource
    properties:
      resource_config:
        deployment:
          id: { get_input: submanager_deployment_id }

  k8s:
    type: cloudify.nodes.SharedResource
    properties:
      resource_config:
        deployment:
          id: { get_attribute: [ submanager, capabilities, related_kubernetes_deployment_id ] }
    relationships:
    - type: cloudify.relationships.depends_on
      target: submanager

  aws_cli_installator:
    type: cloudify.nodes.Component
    properties:
      client:
        host: { get_attribute: [ submanager, capabilities, cloudify_manager_endpoint ] }
        username: admin
        password: admin
        tenant: default_tenant
        port: 80
        protocol: 'http'
      resource_config:
        blueprint:
          main_file_name: 'aws_cli.yaml'
          external_resource: false
          blueprint_archive: https://github.com/mateuszmizer/poc_dish/raw/main/aws_cli_installator.zip
        deployment:
          inputs:
            default_region_name: { get_input: default_region_name }
    relationships:
    - type: cloudify.relationships.depends_on
      target: k8s

  policy_matcher:
    type: cloudify.nodes.Component
    properties:
      client:
        host: { get_attribute: [ submanager, capabilities, cloudify_manager_endpoint ] }
        username: admin
        password: admin
        tenant: default_tenant
        port: 80
        protocol: 'http'
      resource_config:
        blueprint:
          main_file_name: 'policy.yaml'
          external_resource: false
          blueprint_archive: https://github.com/mateuszmizer/poc_dish/raw/main/policy.zip
        deployment:
          inputs:
            cluster_host: { get_attribute: [ k8s, capabilities, kubernetes_cluster_host ] }
            cluster_name: { get_attribute: [ k8s, capabilities, kubernetes_cluster_name ] }
            region: { get_attribute: [ k8s, capabilities, region ] }
            rg_id: { get_attribute: [ k8s, capabilities, rg_id ] }
            aks_id: { get_attribute: [ k8s, capabilities, aks_id ] }
            # deployment_id: { get_input: submanager_deployment_id }
    relationships:
    - type: cloudify.relationships.depends_on
      target: aws_cli_installator
  
  labeler:
    type: cloudify.nodes.Root
    interfaces:
      cloudify.interfaces.lifecycle:
        start:
          implementation: scripts/labeler.py
          executor: central_deployment_agent
          inputs:
            deployment_id: { get_input: submanager_deployment_id }
            SLA_VALUE: { get_attribute: [ policy_matcher, capabilities, SLA_POLICY ] }
    relationships:
    - type: cloudify.relationships.depends_on
      target: policy_matcher

capabilities:
  SLA:
    value: { get_attribute: [ policy_matcher, capabilities, SLA_POLICY ] }